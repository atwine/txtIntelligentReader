[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "txtintelligentreader"
dynamic = ["version"]
description = "Advanced Medical Text Processing System with Multi-Layer Filtering"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "txtIntelligentReader Team", email = "support@txtintelligentreader.com"}
]
maintainers = [
    {name = "txtIntelligentReader Team", email = "support@txtintelligentreader.com"}
]
keywords = [
    "medical", "text-processing", "nlp", "healthcare", "filtering",
    "translation", "clinical", "medical-records", "text-analysis",
    "sentence-extraction", "medical-nlp", "healthcare-ai"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies (using built-in libraries primarily)
    "pathlib2>=2.3.0;python_version<'3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "isort>=5.10.0",
    "pre-commit>=2.20.0",
    "twine>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/your-username/txtIntelligentReader"
Documentation = "https://github.com/your-username/txtIntelligentReader/blob/main/docs/"
Repository = "https://github.com/your-username/txtIntelligentReader.git"
"Bug Reports" = "https://github.com/your-username/txtIntelligentReader/issues"
Changelog = "https://github.com/your-username/txtIntelligentReader/blob/main/CHANGELOG.md"

[project.scripts]
txtintelligentreader = "src.main:main"
txtir = "src.main:main"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools.package-data]
src = ["data/*.json", "data/*.txt", "config/*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["pytest"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
